<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CheckDeletedDatabases" xml:space="preserve">
    <value>select d.name,r.database_guid as DatabaseGUID from sys.databases d inner join sys.database_recovery_status r ON d.database_id = r.database_id</value>
  </data>
  <data name="GatherAgentJobs" xml:space="preserve">
    <value>select REPLACE(sj.Name,'''','`') [Name]
	  ,sj.job_id [JobID]
	  ,sc.name [Category]
	  ,sl.name [OwnerLoginName]
	  ,[LastRunDate] = COALESCE(CONVERT(DATETIME, RTRIM(jh.run_date) + ' '
        + STUFF(STUFF(REPLACE(STR(RTRIM(jh.run_time),6,0),
        ' ','0'),3,0,':'),6,0,':')),'01/01/1900 00:00:00')
	  ,[NextRunDate] = COALESCE(CONVERT(DATETIME, RTRIM(sjs.next_run_date) + ' '
        + STUFF(STUFF(REPLACE(STR(RTRIM(sjs.next_run_time),6,0),
        ' ','0'),3,0,':'),6,0,':')),'01/01/1900 00:00:00')
		,jh.run_status
	  ,CASE
			WHEN jh.run_status = 0 THEN 'Failed'
			WHEN jh.run_status = 1 THEN 'Succeeded'
			WHEN jh.run_status = 2 THEN 'Retry'
			WHEN jh.run_status = 3 THEN 'Canceled'
			ELSE 'Unknown'
	   END [LastRunOutcome]
	  ,CAST(sj.Enabled AS INT) AS [IsEnabled]
	  ,COALESCE(sjs.HasSchedule,0) [HasSchedule]
	  ,COALESCE(jh.run_duration,0) [RunDuration]
	  ,sj.date_created [DateCreated]
	  ,sj.date_modified [DateLastModified]
	  ,CASE
			WHEN sj.notify_level_email = 0 THEN 'Never'
			WHEN sj.notify_level_email = 1 THEN 'OnSuccess'
			WHEN sj.notify_level_email = 2 THEN 'OnFailure'
			WHEN sj.notify_level_email = 3 THEN 'Always'
	   END EmailLevel
	  ,CASE
			WHEN sj.notify_level_page = 0 THEN 'Never'
			WHEN sj.notify_level_page = 1 THEN 'OnSuccess'
			WHEN sj.notify_level_page = 2 THEN 'OnFailure'
			WHEN sj.notify_level_page = 3 THEN 'Always'
	   END PageLevel
	  ,CASE
			WHEN sj.notify_level_netsend = 0 THEN 'Never'
			WHEN sj.notify_level_netsend = 1 THEN 'OnSuccess'
			WHEN sj.notify_level_netsend = 2 THEN 'OnFailure'
			WHEN sj.notify_level_netsend = 3 THEN 'Always'
	   END NetSendLevel
	   ,COALESCE(o1.name,'') [OperatorToEmail]
	   ,COALESCE(o2.name,'') [OperatorToPage]
	   ,COALESCE(o3.name,'') [OperatorToNetSend]
from msdb.dbo.sysjobs sj
INNER JOIN master.dbo.syslogins sl ON sj.owner_sid = sl.sid
INNER JOIN msdb.dbo.syscategories sc ON sj.category_id = sc.category_id
LEFT OUTER JOIN (
select jhi.job_id,jhi.run_date,jhi.run_time,jhi.run_duration,jhi.run_status
from msdb.dbo.sysjobhistory jhi	
inner join (
	select job_id,max(instance_id) instance_id
	from msdb.dbo.sysjobhistory
	group by job_id 
) i on jhi.job_id = i.job_id and jhi.instance_id = i.instance_id
) as jh ON sj.job_id = jh.job_id
LEFT OUTER JOIN (
	SELECT job_id,next_run_date,next_run_time,1 as HasSchedule
	FROM msdb.dbo.sysjobschedules
	WHERE next_run_date &gt; 0
) sjs ON sj.job_id = sjs.job_id
LEFT OUTER JOIN msdb.dbo.sysoperators o1 ON sj.notify_email_operator_id = o1.id
LEFT OUTER JOIN msdb.dbo.sysoperators o2 ON sj.notify_page_operator_id = o2.id
LEFT OUTER JOIN msdb.dbo.sysoperators o3 ON sj.notify_netsend_operator_id = o3.id</value>
  </data>
  <data name="GatherBackups" xml:space="preserve">
    <value>SELECT
  DISTINCT
        rs.database_guid as [DatabaseGuid],
		a.recovery_model_desc as [RecoveryModel],
        COALESCE( (SELECT   MAX(backup_finish_date)
                   FROM     msdb.dbo.backupset
                   WHERE    database_name = a.name
                            AND type = 'd'
                            AND is_copy_only = '0'
                 ),'01/01/1900 00:00:00') AS [LastBackupDate] ,
        COALESCE( ( SELECT   MAX(backup_finish_date)
                   FROM     msdb.dbo.backupset
                   WHERE    database_name = a.name
                            AND type = 'i'
                            AND is_copy_only = '0'
                 ),'01/01/1900 00:00:00') AS [LastDifferentialBackupDate] ,
        COALESCE( ( SELECT   MAX(backup_finish_date)
                   FROM     msdb.dbo.backupset
                   WHERE    database_name = a.name
                            AND type = 'l'
                 ),'01/01/1900 00:00:00') AS [LastLogBackupDate]
FROM    sys.databases a
		INNER JOIN sys.database_recovery_status rs ON a.database_id = rs.database_id
        LEFT OUTER JOIN msdb.dbo.backupset b ON b.database_name = a.name
WHERE   a.name &lt;&gt; 'tempdb' and a.name &lt;&gt; 'model'
        AND a.state_desc = 'online'
GROUP BY a.Name ,
        rs.database_guid,
		a.recovery_model_desc;</value>
  </data>
  <data name="GatherBlocking" xml:space="preserve">
    <value>SELECT
    spid
    ,LTRIM(RTRIM(sp.STATUS)) AS Status
    ,LTRIM(RTRIM(loginame)) as LoginName
    ,LTRIM(RTRIM(hostname)) as HostName
	,LTRIM(RTRIM(program_name)) as ProgramName
    ,open_tran as OpenTran
    ,LTRIM(RTRIM(DB_NAME(sp.dbid))) as DatabaseName
    ,LTRIM(RTRIM(cmd)) as Command
    ,LTRIM(RTRIM(lastwaittype)) as LastWaitType
    ,waittime
    ,last_batch as LastBatchTime
    ,SQLStatement       =
        SUBSTRING
        (
            qt.text,
            er.statement_start_offset/2,
            (CASE WHEN er.statement_end_offset = -1
                THEN LEN(CONVERT(nvarchar(MAX), qt.text)) * 2
                ELSE er.statement_end_offset
                END - er.statement_start_offset)/2
        )
FROM master.dbo.sysprocesses sp
LEFT JOIN sys.dm_exec_requests er
    ON er.session_id = sp.spid
OUTER APPLY sys.dm_exec_sql_text(er.sql_handle) AS qt
WHERE spid IN (SELECT blocked FROM master.dbo.sysprocesses)
AND blocked = 0</value>
  </data>
  <data name="GatherDatabaseFiles" xml:space="preserve">
    <value>if OBJECT_ID('tempdb..#sizes') IS NOT NULL
	DROP TABLE #sizes
if OBJECT_ID('tempdb..#dbs') IS NOT NULL
	DROP TABLE #dbs

CREATE TABLE #dbs(
	DatabaseName varchar(128)
	,database_id int
	,DatabaseGUID varchar(36)
	,physical_name nvarchar(260)
	,[file_id] int
	,Size bigint
	,Type tinyint
	,AvailableSpace bigint
	,Max_size int
	,Growth int
	,is_percent_growth bit
)

create table #sizes(
	database_id int
	,LogicalName varchar(128)
	,groupID int
	,SpaceUsed bigint
)

exec sp_MSforeachdb N'USE [?] INSERT INTO #sizes
	SELECT db_id() as database_id, RTRIM(name) AS [LogicalName],groupid,
   cast(FILEPROPERTY(name, ''SpaceUsed'') as decimal(10,0))AS [SpaceUsed]
FROM sysfiles
ORDER BY groupid DESC

USE [?] 
	insert into #dbs
	select name
	,db_id() as database_id
	,r.database_guid as DatabaseGUID
	,physical_name
	,file_id
	,size
	,type
	,(size * 8) -(FILEPROPERTY(name,''SpaceUsed''))*8 as AvailableSpace
	,Max_size
	,growth
	,is_percent_growth
from sys.database_files d
INNER JOIN sys.database_recovery_status r on db_id() = r.database_id'

select d.DatabaseName as LogicalName
	,d.DatabaseGUID
	,SUBSTRING(Physical_Name,LEN(Physical_Name)-CHARINDEX('\',REVERSE(physical_name)) + 2,CHARINDEX('\',REVERSE(physical_name))) as PhysicalName
	,d.Size * 8 as FileSize
	,CASE
		WHEN d.type = 0 THEN 'Data'
		ELSE 'Log'
	END FileType
	,CASE
		WHEN d.type = 0 THEN cast(s.SpaceUsed as decimal(20,0))
		ELSE l.SpaceUsed
	END UsedSpace
	,d.AvailableSPace as AvailableSpace
	,CAST(cast(d.AvailableSpace AS DECIMAL)/cast((d.size *8) as decimal) AS DECIMAL(10,3)) AS PercentageFree
	,d.Max_size as MaxSize
	,d.Growth * 8 as Growth
	,CASE
		WHEN d.is_percent_growth = 1 THEN 'PERCENT'
		ELSE 'KB'
	END GrowthType
	,REVERSE(SUBSTRING(REVERSE(d.Physical_name),CHARINDEX('\',REVERSE(d.Physical_Name))+1,LEN(d.Physical_Name))) AS Directory
from #dbs d
INNER JOIN #sizes s ON d.database_id = s.database_id AND d.databaseName = s.LogicalName
LEFT OUTER JOIN 
(
	SELECT instance_name AS 'DatabaseName'
	   ,db_id(instance_name) as database_id	
	   ,1 as Type
	   ,MAX(CASE 
			   WHEN counter_name = 'Log File(s) Used Size (KB)' 
				   THEN cntr_value
			   ELSE 0 
		   END) AS 'SpaceUsed'
	FROM sysperfinfo 
	WHERE counter_name = 'Log File(s) Used Size (KB)'
	  AND instance_name != '_total' 
	GROUP BY instance_name
) as l on d.database_id= l.database_id</value>
  </data>
  <data name="GatherDatabases" xml:space="preserve">
    <value>if OBJECT_ID('tempdb..#sizes') IS NOT NULL
	DROP TABLE #sizes
if OBJECT_ID('tempdb..#available') IS NOT NULL
	DROP TABLE #available

create table #sizes(
	database_id int
	,IndexUsage bigint
	,DataSpaceUsage bigint
)
create table #available (
	database_id int,
	type int,
	SpaceAvailable bigint
)
exec sp_MSforeachdb N'USE [?] INSERT INTO #sizes
	select  db_id() as database_id,(sum(used_pages)-sum(
				CASE
					-- XML-Index and FT-Index and semantic index internal tables are not considered "data", but is part of "index_size"
					When it.internal_type IN (202,204,207,211,212,213,214,215,216,221,222,236) Then 0
					When a.type &lt;&gt; 1 and p.index_id &lt; 2 Then a.used_pages
					When p.index_id &lt; 2 Then a.data_pages
					Else 0
				END
			)) * 8192 / 1024 AS IndexUsage
			,sum(
				CASE
					-- XML-Index and FT-Index and semantic index internal tables are not considered "data", but is part of "index_size"
					When it.internal_type IN (202,204,207,211,212,213,214,215,216,221,222,236) Then 0
					When a.type &lt;&gt; 1 and p.index_id &lt; 2 Then a.used_pages
					When p.index_id &lt; 2 Then a.data_pages
					Else 0
				END
			) * 8 AS DataSpaceUsage
	from sys.partitions p join sys.allocation_units a on p.partition_id = a.container_id
		left join sys.internal_tables it on p.object_id = it.object_id'

exec sp_MSforeachdb N'USE [?] 
	insert into #available
	select db_id() as database_id
	,type
	,sum((size * 8) -(FILEPROPERTY(name,''SpaceUsed''))*8) as SpaceAvailable
from sys.database_files
WHERE type = 0
group by type'

select sdb.name AS [DatabaseName]
	,sdb.create_date as [CreationDate]
	,CAST(sdb.compatibility_level AS INT) AS [CompatibilityLevel]
	,sdb.collation_name as [Collation]
	,sdb.is_read_only as [ReadOnly]
	,sdb.is_auto_close_on AS [AutoClose]
	,sdb.is_auto_shrink_on AS [AutoShrink]
	,sdb.recovery_model_desc AS [RecoveryModel]
	,sdb.page_verify_option_desc AS [PageVerify]
	,sdb.state_desc as [Status]
	,SUSER_SNAME(sdb.owner_sid) AS [Owner]
	,mf.Size
	,s.DataSpaceUsage
	,s.IndexUsage AS [IndexSpaceUsage]
	,a.SpaceAvailable
	,drs.database_guid AS [DatabaseGUID]
from sys.databases sdb
inner join
(
	select database_id,(sum(size) * 8)/1024 as Size
	from sys.master_Files 
	group by database_id
) mf on sdb.database_id = mf.database_id 
INNER JOIN #sizes s on sdb.database_id = s.database_id
INNER JOIN #available a on sdb.database_id = a.database_id
INNER JOIN sys.database_recovery_status drs ON drs.database_id = sdb.database_id</value>
  </data>
  <data name="GatherInstance" xml:space="preserve">
    <value>select @@SERVERNAME AS InstanceName,SERVERPROPERTY('Edition') AS Edition,SERVERPROPERTY('ProductVersion') AS Version,CAST(SERVERPROPERTY('isClustered') as BIT) AS isClustered ,SERVERPROPERTY('ProductLevel') AS ProductLevel
                                                        ,[Min] as minMemory,CAST([Max] AS BIGINT) as maxMemory
                                                        FROM
                                                        (SELECT left(name,3) as name, value_in_use
                                                        FROM sys.configurations
                                                        where name like '%server memory%') as s
                                                        PIVOT
                                                        (
	                                                        max(value_in_use)
	                                                        FOR name in ([min],[max])
                                                        ) as output</value>
  </data>
  <data name="GatherWaitStats" xml:space="preserve">
    <value>SELECT @@ServerName as InstanceName,[wait_type],[waiting_tasks_count],[wait_time_ms],[max_wait_time_ms],[signal_wait_time_ms],
GETDATE() as [CollectionDate]
FROM sys.dm_os_wait_stats</value>
  </data>
</root>